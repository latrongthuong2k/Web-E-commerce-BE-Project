package com.ecommerce.myapp.controller.user;import com.ecommerce.myapp.dtos.product.mappers.ProductSimpleMapper;import com.ecommerce.myapp.dtos.product.request.ReqProductOnCart;import com.ecommerce.myapp.dtos.product.response.ResSimpleInfoProductDto;import com.ecommerce.myapp.model.group.Product;import com.ecommerce.myapp.services.CartService;import com.ecommerce.myapp.services.UserService;import lombok.AllArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Set;@RestController@AllArgsConstructor@RequestMapping("/api/v1/shopping-cart")@PreAuthorize("hasAnyRole('USER','ADMIN','MANAGER')")public class ShoppingCartController {    private final UserService userService;    private final CartService cartService;    private final ProductSimpleMapper productSimpleMapper;    //---------------------------------------------------------------------    // user    // shopping-cart//    @Cacheable(value = "shopping-cart", key = "{#page,#sortField,#sortDir}")    @PostMapping()    public ResponseEntity<String> createUserCart(    ) {        cartService.createCart(userService.getCurrentAuditor());        return ResponseEntity.ok("user cart created");    }    //  /shopping-cart/{userId}    @GetMapping("/cart-products")    public ResponseEntity<List<ResSimpleInfoProductDto>> listProductOnCart() {        var user = userService.getCurrentAuditor();        Set<Product> products = cartService.getAllProduct(user);        List<ResSimpleInfoProductDto> productOnCarts = products.stream()                .map(productSimpleMapper::toDto).toList();        return ResponseEntity.ok(productOnCarts);    }    //  /shopping-cart/{userId}/add    @PostMapping("/add")    public ResponseEntity<String> addProduct(            @RequestBody List<ReqProductOnCart> reqProductOnCart    ) {        var user = userService.getCurrentAuditor();        cartService.addProductToCart(user, reqProductOnCart);        return ResponseEntity.ok("Success add to cart");    }    //  /shopping-cart/{userId}/update/{cartItemId}    @PostMapping("/update/{productId}")    public ResponseEntity<Void> updateCart(            @PathVariable("productId") Long productId,            @RequestParam("quantity") Integer quantity    ) {        var user = userService.getCurrentAuditor();        cartService.updateCartItem(user, productId, quantity);        return new ResponseEntity<>(HttpStatus.OK);    }    //  /shopping-cart/{userId}/delete/{shoppingCartId}    @DeleteMapping("/delete/{productId}")    public ResponseEntity<Void> updateCart(            @PathVariable("productId") Long productId    ) {        cartService.deleteCartItem(userService.getCurrentAuditor(), productId);        return new ResponseEntity<>(HttpStatus.OK);    }    //  /shopping-cart/{userId}/clear    @DeleteMapping("/clear")    public ResponseEntity<Void> clearAllItem() {        cartService.clearAllItem(userService.getCurrentAuditor());        return new ResponseEntity<>(HttpStatus.OK);    }    //  /shopping-cart/{userId}/check-out    @PostMapping("/check-out")    public ResponseEntity<Void> checkOut(@RequestParam("note") String note) {        cartService.checkOut(userService.getCurrentAuditor(), note);        return new ResponseEntity<>(HttpStatus.OK);    }}