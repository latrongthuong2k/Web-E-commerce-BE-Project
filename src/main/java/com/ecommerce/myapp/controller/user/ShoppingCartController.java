package com.ecommerce.myapp.controller.user;import com.ecommerce.myapp.dtos.product.mappers.ProductSimpleMapper;import com.ecommerce.myapp.dtos.product.request.ReqProductOnCart;import com.ecommerce.myapp.dtos.product.response.ResCartItemDto;import com.ecommerce.myapp.model.client.CartItem;import com.ecommerce.myapp.model.group.Product;import com.ecommerce.myapp.s3.S3ProductImages;import com.ecommerce.myapp.services.CartService;import com.ecommerce.myapp.services.ProductService;import com.ecommerce.myapp.services.UserService;import lombok.AllArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import java.math.BigDecimal;import java.util.List;import java.util.Objects;import java.util.Set;@RestController@AllArgsConstructor@RequestMapping("/api/v1/user/shopping-cart")@PreAuthorize("hasAnyRole('USER','ADMIN','MANAGER')")public class ShoppingCartController {    private final UserService userService;    private final CartService cartService;    private final ProductSimpleMapper productSimpleMapper;    private final ProductService productService;    //---------------------------------------------------------------------    // user    // shopping-cart//    @Cacheable(value = "shopping-cart", key = "{#page,#sortField,#sortDir}")    @PostMapping()    public ResponseEntity<String> createUserCart(    ) {        cartService.createCart(userService.getCurrentAuditor());        return ResponseEntity.ok("user cart created");    }    //  /shopping-cart/{userId}    @GetMapping("/cart-products")    public ResponseEntity<List<ResCartItemDto>> listProductOnCart() {        var user = userService.getCurrentAuditor();        Set<CartItem> cartItems = cartService.getCartItems(user);        List<ResCartItemDto> productDTOS = cartItems.stream().map(cartItem -> {            Product product = cartItem.getProduct();            if (product != null) {                BigDecimal quantity = new BigDecimal(cartItem.getQuantity());                BigDecimal unitPrice = product.getUnitPrice();                BigDecimal totalPrice = unitPrice.multiply(quantity);  // Tính tổng giá                Set<S3ProductImages> productImages = productService.getMainImage(product.getProductId());                return new ResCartItemDto(                        product.getProductId(),                        product.getProductName(),                        product.getSku(),                        unitPrice,                        totalPrice,                        cartItem.getQuantity(),                        cartItem.getSizeLabel(),                        productImages                );            } else {                return null;            }            // Loại bỏ các item null        }).filter(Objects::nonNull).toList();        return ResponseEntity.ok(productDTOS);    }    //  /shopping-cart/{userId}/add    @PostMapping("/add")    public ResponseEntity<Void> addProduct(            @RequestBody List<ReqProductOnCart> reqProductOnCart    ) {        var user = userService.getCurrentAuditor();        cartService.addProductToCart(user, reqProductOnCart);        return new ResponseEntity<>(HttpStatus.OK);    }    //  /shopping-cart/{userId}/update/{cartItemId}    @PutMapping("/update/{productId}")    public ResponseEntity<Void> updateCart(            @PathVariable("productId") Long productId,            @RequestParam("quantity") Integer quantity    ) {        var user = userService.getCurrentAuditor();        cartService.updateCartItem(user, productId, quantity);        return new ResponseEntity<>(HttpStatus.OK);    }    //  /shopping-cart/{userId}/delete/{shoppingCartId}    @DeleteMapping("/delete/{productId}/{sizeLabel}")    public ResponseEntity<Void> deleteCartItem(            @PathVariable(value = "productId") Long productId,            @PathVariable(value = "sizeLabel") String sizeLabel    ) {        cartService.deleteCartItem(userService.getCurrentAuditor(), productId,sizeLabel);        return new ResponseEntity<>(HttpStatus.OK);    }    @DeleteMapping("/delete")    public ResponseEntity<Void> deleteAllItem() {        cartService.cleanCartItems(userService.getCurrentAuditor());        return new ResponseEntity<>(HttpStatus.OK);    }    //  /shopping-cart/{userId}/clear    @DeleteMapping("/clear")    public ResponseEntity<Void> clearAllItem() {        cartService.cleanCartItems(userService.getCurrentAuditor());        return new ResponseEntity<>(HttpStatus.OK);    }    //  /shopping-cart/{userId}/check-out    @PostMapping("/check-out")    public ResponseEntity<Void> checkOut() {        var user =userService.getCurrentAuditor();        cartService.checkOut(user);        cartService.cleanCartItems(user);        return new ResponseEntity<>(HttpStatus.OK);    }}