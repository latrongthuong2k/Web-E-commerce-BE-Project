package com.ecommerce.myapp.controller.client;import com.ecommerce.myapp.dtos.product.mappers.ProductFullMapper;import com.ecommerce.myapp.dtos.product.mappers.ProductSimpleMapper;import com.ecommerce.myapp.dtos.product.response.ProductPriorityDTO;import com.ecommerce.myapp.dtos.product.response.ResProductDetailDTO;import com.ecommerce.myapp.dtos.product.response.ResSearchTermProductDTO;import com.ecommerce.myapp.dtos.product.response.ResSimpleInfoProductDto;import com.ecommerce.myapp.model.group.Product;import com.ecommerce.myapp.model.group.Size;import com.ecommerce.myapp.s3.S3ProductImages;import com.ecommerce.myapp.s3.S3ProductImagesDetail;import com.ecommerce.myapp.services.CategoryService;import com.ecommerce.myapp.services.ProductService;import lombok.AllArgsConstructor;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.Cacheable;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.math.BigDecimal;import java.util.*;import java.util.stream.Collectors;@RestController@AllArgsConstructor@RequestMapping("/api/v1/client/product")public class ProductController {    private final ProductService productService;    private final CategoryService categoryService;    private final ProductSimpleMapper productSimpleMapper;    private final ProductFullMapper productFullMapper;    //---------------------------------------------------------------------    // permitAll    private Map<String, Object> objectMap(Page<ResSimpleInfoProductDto> productPage) {        Map<String, Object> response = new HashMap<>();        response.put("content", productPage.getContent());        response.put("totalPages", productPage.getTotalPages());        return response;    }    private Map<String, Object> objectMapList(List<ResSimpleInfoProductDto> productPage, int totalPages) {        Map<String, Object> response = new HashMap<>();        response.put("content", productPage);        response.put("totalPages", totalPages);        return response;    }    // search    @Cacheable(value = "productSearch", key = "{#search}", condition = "{#search.length() > 3}")    @GetMapping("/products/search/{query}")    public ResponseEntity<List<ResSearchTermProductDTO>> productSearch(            @PathVariable(name = "query") String search) {        List<ResSearchTermProductDTO> productDTOS = productService.productsWithSearch(search)                .stream().map(product -> new ResSearchTermProductDTO(                        product.getProductId(),                        product.getProductName())).toList();        return ResponseEntity.ok(productDTOS);    }    // productIds page    @Cacheable(value = "all-product", key = "{#page,#sortField,#sortDir}")    @GetMapping("/products")    public ResponseEntity<Map<String, Object>> getProductById(            @RequestParam(name = "page", defaultValue = "0") int page,            @RequestParam(name = "size", defaultValue = "20") int size,            @RequestParam(name = "sortField", defaultValue = "productName") String sortField,            @RequestParam(name = "sortDir", defaultValue = "asc") String sortDir) {        Pageable pageable = PageRequest.of(page, size, Sort.by(sortDir.equals("asc") ?                Sort.Direction.ASC : Sort.Direction.DESC, sortField));        Page<Product> products = productService.getAllProduct(pageable);        Page<ResSimpleInfoProductDto> productPage = products.map(productSimpleMapper::toDto);        var response = objectMap(productPage);        return ResponseEntity.ok(response);//        return categoryService.getAllCategory().stream().map(category -> {//            CategoryImage categoryImage = categoryService.getCategoryImage(category);//            if (categoryImage != null)//                return new ResCategory(//                        category.getId(),//                        category.getCategoryName(),//                        s3Service.getObjectUrl(s3Buckets.getCategoryBucket(), categoryImage.getKey())//                );//            else//                return new ResCategory(//                        category.getId(),//                        category.getCategoryName(),//                        null//                );//        }).toList();    }    // featured-Products    @Cacheable(value = "featured-productIds", key = "{#size}")    @GetMapping("/featured-products")    public ResponseEntity<Map<String, Object>> getFeaturedProducts(            @RequestParam(name = "size", defaultValue = "4") int size) {        Pageable pageable = PageRequest.of(0, size);        Page<ProductPriorityDTO> products = productService.getFeaturedProducts(pageable);        Map<String, Object> response = getObjectMapForTypeList(products);        return ResponseEntity.ok(response);    }    // new-productIds    @Cacheable(value = "new-productIds", key = "{#page,#size}")    @GetMapping("/new-products")    public ResponseEntity<Map<String, Object>> getNewProducts(            @RequestParam(name = "page", defaultValue = "0") int page,            @RequestParam(name = "size", defaultValue = "20") int size,            @RequestParam(name = "sortField", defaultValue = "productName") String sortField) {        Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, sortField));        Page<Product> products = productService.getNewProducts(pageable);        Map<String, Object> response = getObjectMap(products);        return ResponseEntity.ok(response);    }    private Map<String, Object> getObjectMap(Page<Product> products) {        List<ResSimpleInfoProductDto> productDTOS = products.stream().map(product -> {            Set<S3ProductImages> productImages = productService.getMainImage(product.getProductId());            List<Size> sizes = productService.getSizeByProductId(product.getProductId());            return new ResSimpleInfoProductDto(                    product.getProductId(),                    product.getProductName(),                    product.getUnitPrice(),                    sizes,                    productImages            );        }).toList();        return objectMapList(productDTOS, products.getTotalPages());    }    // best-seller-productIds    @Cacheable(value = "best-seller-productIds", key = "{#page,#size}")    @GetMapping("/best-seller-products")    public ResponseEntity<Map<String, Object>> getBestSellerProducts(            @RequestParam(name = "page", defaultValue = "0") int page,            @RequestParam(name = "size", defaultValue = "20") int size) {        Pageable pageable = PageRequest.of(page, size);        Page<Product> products = productService.getBestSellerProducts(pageable);        //        Map<String, Object> response = getObjectMap(productIds);        Map<String, Object> response = getObjectMap(products);        return ResponseEntity.ok(response);    }    private Map<String, Object> getObjectMapForTypeList(Page<ProductPriorityDTO> products) {        List<ResSimpleInfoProductDto> productDTOS = products.stream().map(product -> {            Set<S3ProductImages> productImages = productService.getMainImage(product.productId());            List<Size> sizes = productService.getSizeByProductId(product.productId());            return new ResSimpleInfoProductDto(                    product.productId(),                    product.productName(),                    product.unitPrice(),                    sizes,                    productImages            );        }).toList();        return objectMapList(productDTOS, products.getTotalPages());    }    // productIds/catalogs/{catalogId}    @CacheEvict(value = "productIds-by-category", key = "{#categoryId}")    @GetMapping("/categories")    public ResponseEntity<?> getProductByCategory(            @RequestParam(name = "productSize", defaultValue = "") String sizeIdString,            @RequestParam(name = "price", defaultValue = "") String price,            @RequestParam(name = "sortDir", defaultValue = "asc") String sortDir,            @RequestParam(name = "sortField", defaultValue = "created_at") String sortField,            @RequestParam(name = "categoryId") Long categoryId,            @RequestParam(name = "page", defaultValue = "0") int page,            @RequestParam(name = "size", defaultValue = "20") int pageSize) {        Pageable pageable = PageRequest.of(page, pageSize, Sort.by(sortDir.equals("asc") ?                Sort.Direction.ASC : Sort.Direction.DESC, sortField));        // parse        BigDecimal priceParse;        try {            priceParse = BigDecimal.valueOf(price.isEmpty() ? 0 : Long.parseLong(price));        } catch (Exception e) {            throw new IllegalArgumentException("Price can't a string");        }        // check        categoryService.checkCategoryExistence(categoryId);        Set<Long> sizeIDs;        if (!sizeIdString.trim().isEmpty()) {            try {                sizeIDs = Arrays.stream(sizeIdString.split(","))                        .map(Long::parseLong)                        .collect(Collectors.toSet());            } catch (NumberFormatException e) {                throw new IllegalArgumentException("Wrong size ID exception");            }        } else            sizeIDs = new HashSet<>();        Page<Product> products = productService.getAllProductByFilter(                categoryId, priceParse, sizeIDs, pageable);        Map<String, Object> response = getObjectMap(products);        return ResponseEntity.ok(response);    }    @Cacheable(value = "productIds-sizeObj")    @GetMapping("/sizes")    public ResponseEntity<List<Size>> getSizes() {        List<Size> sizes = productService.getAllSize();        return ResponseEntity.ok(sizes);    }    // productIds/{productId}    @CacheEvict(value = "product", key = "{#productId}")    @GetMapping("/products/{productId}")    public ResponseEntity<ResProductDetailDTO> getProductById(@PathVariable("productId") Long productId) {        Product product = productService.getProductById(productId);        Set<S3ProductImagesDetail> productImages = productService.findImages(product);        List<Size> sizes = productService.getSizeByProductId(product.getProductId());        ResProductDetailDTO productDTOS = productFullMapper.toProductDto(product);        productDTOS.setProductImages(productImages);        productDTOS.setSizes(sizes);        return ResponseEntity.ok(productDTOS);    }}